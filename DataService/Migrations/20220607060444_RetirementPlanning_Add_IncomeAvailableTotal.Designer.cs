// <auto-generated />
using System;
using DataService.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataService.Migrations
{
    [DbContext(typeof(AlumaDBContext))]
    [Migration("20220607060444_RetirementPlanning_Add_IncomeAvailableTotal")]
    partial class RetirementPlanning_Add_IncomeAvailableTotal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataService.Model.AccrualModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllocateTo")
                        .HasColumnType("int");

                    b.Property<double>("ClientAssetsCommencement")
                        .HasColumnType("float");

                    b.Property<double>("ClientEstateCurrent")
                        .HasColumnType("float");

                    b.Property<double>("ClientExcludedValue")
                        .HasColumnType("float");

                    b.Property<double>("ClientLiabilities")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Offset")
                        .HasColumnType("float");

                    b.Property<double>("SpouseAssetsCommencement")
                        .HasColumnType("float");

                    b.Property<double>("SpouseEstateCurrent")
                        .HasColumnType("float");

                    b.Property<double>("SpouseExcludedValue")
                        .HasColumnType("float");

                    b.Property<double>("SpouseLiabilities")
                        .HasColumnType("float");

                    b.Property<double>("TotalAsAsset")
                        .HasColumnType("float");

                    b.Property<double>("TotalAsLiability")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_accrual");
                });

            modelBuilder.Entity("DataService.Model.AddressModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddressSameAs")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ComplexName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("InCareAddress")
                        .HasColumnType("bit");

                    b.Property<string>("InCareName")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Suburb")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("YearsAtAddress")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressSameAs = false,
                            City = "Pretoria",
                            ComplexName = "FinTech Campus",
                            Country = "South Africa",
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 897, DateTimeKind.Local).AddTicks(3945),
                            CreatedBy = 0,
                            InCareAddress = false,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 897, DateTimeKind.Local).AddTicks(3964),
                            ModifiedBy = 0,
                            PostalCode = "0081",
                            StreetName = "Cnr Illanga and Botterklapper",
                            Suburb = "The Willows",
                            Type = 1,
                            UserId = 1,
                            YearsAtAddress = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressSameAs = false,
                            City = "Johannesburg",
                            ComplexName = "Postnet Suite 33",
                            Country = "South Africa",
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 897, DateTimeKind.Local).AddTicks(7470),
                            CreatedBy = 0,
                            InCareAddress = false,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 897, DateTimeKind.Local).AddTicks(7477),
                            ModifiedBy = 0,
                            PostalCode = "2157",
                            StreetName = "Private Bag X 26",
                            Suburb = "Sunninghill",
                            Type = 0,
                            UserId = 1,
                            YearsAtAddress = 0
                        });
                });

            modelBuilder.Entity("DataService.Model.AdministrationCostsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdvertisingCosts")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("OtherAdminCosts")
                        .HasColumnType("float");

                    b.Property<string>("OtherAdminDescription")
                        .HasColumnType("varchar(100)");

                    b.Property<double>("OtherConveyanceCosts")
                        .HasColumnType("float");

                    b.Property<double>("RatesAndTaxes")
                        .HasColumnType("float");

                    b.Property<double>("TotalEstimatedCosts")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_administration_costs");
                });

            modelBuilder.Entity("DataService.Model.AdvisorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdviceBonds")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceDebentures")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceDerivatives")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceLTDeposits")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceLTSubCatA")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceLTSubCatB1")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceLTSubCatB1A")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceLTSubCatB2")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceLTSubCatB2A")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceLTSubCatC")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceMoneyMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceParticipatoryInterestCollective")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceParticipatoryInterestHedge")
                        .HasColumnType("bit");

                    b.Property<bool>("AdvicePensionFunds")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceRetailPension")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceSTCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceSTDeposits")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceSTPersonal")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceSTPersonalA1")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceSecurities")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceShares")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceStructuredDeposits")
                        .HasColumnType("bit");

                    b.Property<bool>("AdviceWarrants")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessTel")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HomeTel")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("SupervisedBonds")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedDebentures")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedDerivatives")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedLTDeposits")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedLTSubCatA")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedLTSubCatB1")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedLTSubCatB1A")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedLTSubCatB2")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedLTSubCatB2A")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedLTSubCatC")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedMoneyMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedParticipatoryInterestCollective")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedParticipatoryInterestHedge")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedPensionFunds")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedRetailPension")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedSTCommercial")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedSTDeposits")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedSTPersonal")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedSTPersonalA1")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedSecurities")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedShares")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedStructuredDeposits")
                        .HasColumnType("bit");

                    b.Property<bool>("SupervisedWarrants")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isExternalBroker")
                        .HasColumnType("bit");

                    b.Property<bool>("isSupervised")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("advisors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdviceBonds = true,
                            AdviceDebentures = true,
                            AdviceDerivatives = true,
                            AdviceLTDeposits = true,
                            AdviceLTSubCatA = true,
                            AdviceLTSubCatB1 = true,
                            AdviceLTSubCatB1A = true,
                            AdviceLTSubCatB2 = true,
                            AdviceLTSubCatB2A = true,
                            AdviceLTSubCatC = true,
                            AdviceMoneyMarket = true,
                            AdviceParticipatoryInterestCollective = true,
                            AdviceParticipatoryInterestHedge = true,
                            AdvicePensionFunds = true,
                            AdviceRetailPension = true,
                            AdviceSTCommercial = true,
                            AdviceSTDeposits = true,
                            AdviceSTPersonal = true,
                            AdviceSTPersonalA1 = true,
                            AdviceSecurities = true,
                            AdviceShares = true,
                            AdviceStructuredDeposits = true,
                            AdviceWarrants = true,
                            AppointmentDate = new DateTime(2021, 6, 7, 8, 4, 43, 863, DateTimeKind.Local).AddTicks(6180),
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 862, DateTimeKind.Local).AddTicks(8838),
                            CreatedBy = 0,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 863, DateTimeKind.Local).AddTicks(5340),
                            ModifiedBy = 0,
                            SupervisedBonds = true,
                            SupervisedDebentures = true,
                            SupervisedDerivatives = true,
                            SupervisedLTDeposits = true,
                            SupervisedLTSubCatA = true,
                            SupervisedLTSubCatB1 = true,
                            SupervisedLTSubCatB1A = true,
                            SupervisedLTSubCatB2 = true,
                            SupervisedLTSubCatB2A = true,
                            SupervisedLTSubCatC = true,
                            SupervisedMoneyMarket = true,
                            SupervisedParticipatoryInterestCollective = true,
                            SupervisedParticipatoryInterestHedge = true,
                            SupervisedPensionFunds = true,
                            SupervisedRetailPension = true,
                            SupervisedSTCommercial = true,
                            SupervisedSTDeposits = true,
                            SupervisedSTPersonal = true,
                            SupervisedSTPersonalA1 = true,
                            SupervisedSecurities = true,
                            SupervisedShares = true,
                            SupervisedStructuredDeposits = true,
                            SupervisedWarrants = true,
                            UserId = 1,
                            isActive = true,
                            isExternalBroker = false,
                            isSupervised = false
                        });
                });

            modelBuilder.Entity("DataService.Model.ApplicationDocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("application_documents");
                });

            modelBuilder.Entity("DataService.Model.ApplicationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("int");

                    b.Property<string>("BdaNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("DocumentsCreated")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentsSigned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("SignatureConsent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SignatureConsentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ClientId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("DataService.Model.AssetSummaryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("TotalAccrual")
                        .HasColumnType("float");

                    b.Property<double>("TotalAssetsAttractingCGT")
                        .HasColumnType("float");

                    b.Property<double>("TotalAssetsExcemptCGT")
                        .HasColumnType("float");

                    b.Property<double>("TotalLiabilities")
                        .HasColumnType("float");

                    b.Property<double>("TotalLiquidAssets")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_summary_assets");
                });

            modelBuilder.Entity("DataService.Model.AssetsAttractingCGTModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllocateTo")
                        .HasColumnType("int");

                    b.Property<double>("BaseCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool>("DisposedAtRetirement")
                        .HasColumnType("bit");

                    b.Property<bool>("DisposedOnDisability")
                        .HasColumnType("bit");

                    b.Property<double>("EscPercent")
                        .HasColumnType("float");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("Growth")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<double>("RecurringPremium")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId");

                    b.ToTable("fna_assets_attracting_cgt");
                });

            modelBuilder.Entity("DataService.Model.AssetsExemptFromCGTModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllocateTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool>("DisposedAtRetirement")
                        .HasColumnType("bit");

                    b.Property<bool>("DisposedOnDisability")
                        .HasColumnType("bit");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("Growth")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId");

                    b.ToTable("fna_assets_exempt_from_cgt", "dbo");
                });

            modelBuilder.Entity("DataService.Model.AssumptionsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<double>("CurrentGrossIncome")
                        .HasColumnType("float");

                    b.Property<double>("CurrentNetIncome")
                        .HasColumnType("float");

                    b.Property<int>("DeathInvestmentRisk")
                        .HasColumnType("int");

                    b.Property<int>("DisabilityInvestmentRisk")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<int>("LifeExpectancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("RetirementAge")
                        .HasColumnType("int");

                    b.Property<int>("RetirementInvestmentRisk")
                        .HasColumnType("int");

                    b.Property<int>("YearsAfterRetirement")
                        .HasColumnType("int");

                    b.Property<int>("YearsTillLifeExpectancy")
                        .HasColumnType("int");

                    b.Property<int>("YearsTillRetirement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_assumptions");
                });

            modelBuilder.Entity("DataService.Model.BankDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccOpen")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AcceptCredits")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AcceptDebits")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FoundAtBank")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdNumberMatch")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InitialsMatch")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JobID")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NamesMatch")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OlderThan3Months")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Reference")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SearchData")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Surname")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TypeCorrect")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VerificationType")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_bank_details");
                });

            modelBuilder.Entity("DataService.Model.CapitalGainsTaxModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FnaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("PreviousCapitalLosses")
                        .HasColumnType("float");

                    b.Property<double>("TotalCGTPayable")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FnaId")
                        .IsUnique();

                    b.ToTable("fna_capital_gains_tax");
                });

            modelBuilder.Entity("DataService.Model.ClientFNAModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ClientId");

                    b.ToTable("client_fna");
                });

            modelBuilder.Entity("DataService.Model.ClientModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<string>("CityOfBirth")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryOfBirth")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryOfResidence")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Education")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmploymentDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<int>("MaritalDetailsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("NonResidentialAccount")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isSmoker")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("LeadId")
                        .IsUnique()
                        .HasFilter("[LeadId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("DataService.Model.ClientProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("client_products");
                });

            modelBuilder.Entity("DataService.Model.ConsumerProtectionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("InformOffers")
                        .HasColumnType("bit");

                    b.Property<bool>("InformProducts")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("OtherCommMethods")
                        .HasColumnType("bit");

                    b.Property<int>("PreferredComm")
                        .HasColumnType("int");

                    b.Property<bool>("RequestResearch")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_consumer_protection");
                });

            modelBuilder.Entity("DataService.Model.DisclosureModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdvisorAuthority")
                        .HasColumnType("bit");

                    b.Property<string>("AdvisorAuthorityProducts")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorisedUsers")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("BrokerAppointment")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ClientId");

                    b.ToTable("advisor_disclosures");
                });

            modelBuilder.Entity("DataService.Model.EconomyVariablesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("InflationRate")
                        .HasColumnType("float");

                    b.Property<double>("InvestmentReturnRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_economy");
                });

            modelBuilder.Entity("DataService.Model.EmploymentDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Employer")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Industry")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WorkNumber")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_employment_details");
                });

            modelBuilder.Entity("DataService.Model.EstateDutyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Abatement")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("LimitedRights")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("ResidueToSpouse")
                        .HasColumnType("bit");

                    b.Property<double>("Section4pValue")
                        .HasColumnType("float");

                    b.Property<double>("TotalDutyPayable")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_estate_duty");
                });

            modelBuilder.Entity("DataService.Model.EstateExpensesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdminCosts")
                        .HasColumnType("float");

                    b.Property<double>("CashBequests")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<double>("ExecutorsFees")
                        .HasColumnType("float");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("FuneralExpenses")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Other")
                        .HasColumnType("float");

                    b.Property<double>("TotalEstateExpenses")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_estate_expenses");
                });

            modelBuilder.Entity("DataService.Model.FSPMandateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalAdvisorFee")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdminFee")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DiscretionType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DividendInstruction")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ForeignInvestmentAnnualFee")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ForeignInvestmentInitialFee")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InitialFee")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvestmentObjective")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LimitedInstruction")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PortfolioManagementFee")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VoteInstruction")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_mandate");
                });

            modelBuilder.Entity("DataService.Model.ForeignTaxResidencyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("TaxResidencyId")
                        .HasColumnType("int");

                    b.Property<string>("TinNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TinUnavailableReason")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TaxResidencyId");

                    b.ToTable("client_foreign_tax");
                });

            modelBuilder.Entity("DataService.Model.InsuranceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AbsoluteIpPm")
                        .HasColumnType("float");

                    b.Property<int>("AllocateTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<double>("Disability")
                        .HasColumnType("float");

                    b.Property<double>("DreadDisease")
                        .HasColumnType("float");

                    b.Property<double>("ExtendedIpPm")
                        .HasColumnType("float");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("LifeCover")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FNAId");

                    b.ToTable("fna_insurance");
                });

            modelBuilder.Entity("DataService.Model.InsuranceSummaryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("TotalToLiquidity")
                        .HasColumnType("float");

                    b.Property<double>("TotalToSpouse")
                        .HasColumnType("float");

                    b.Property<double>("TotalToThirdParty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_summary_insurance");
                });

            modelBuilder.Entity("DataService.Model.KYCDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CellNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Citizenship")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DateOfBrith")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DeceasedStatus")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstNames")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("KycMethod")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_kyc_data");
                });

            modelBuilder.Entity("DataService.Model.LeadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("CRMId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("LeadType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_lead");
                });

            modelBuilder.Entity("DataService.Model.LiabilitiesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId");

                    b.ToTable("fna_liabilities");
                });

            modelBuilder.Entity("DataService.Model.LiquidAssetsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllocateTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool>("DisposedAtRetirement")
                        .HasColumnType("bit");

                    b.Property<bool>("DisposedOnDisability")
                        .HasColumnType("bit");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("Growth")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId");

                    b.ToTable("fna_liquid_assets");
                });

            modelBuilder.Entity("DataService.Model.MaritalDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CountryOfMarriage")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DateOfMarriage")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ForeignMarriage")
                        .HasColumnType("bit");

                    b.Property<string>("IdNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaidenName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("PowerOfAttorney")
                        .HasColumnType("bit");

                    b.Property<string>("SpouseDateOfBirth")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Surname")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_marital_details");
                });

            modelBuilder.Entity("DataService.Model.OtpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Otp")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OtpType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("isValidated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_otp");
                });

            modelBuilder.Entity("DataService.Model.PassportModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CountryOfIssue")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_passports");
                });

            modelBuilder.Entity("DataService.Model.PrimaryResidenceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllocateTo")
                        .HasColumnType("int");

                    b.Property<double>("BaseCost")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<bool>("DisposedAtRetirement")
                        .HasColumnType("bit");

                    b.Property<bool>("DisposedOnDisability")
                        .HasColumnType("bit");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("Growth")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_primary_residence");
                });

            modelBuilder.Entity("DataService.Model.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociatedRisk")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Institute")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssociatedRisk = 3,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(5773),
                            CreatedBy = 0,
                            Description = "The Minimum Return Multi-Asset Global Note (the “Note”) is a five year 100% ZAR capital protected investment linked to the CITI Flexible Multi Asset V15% Index (the “Index”). The investment objective of Note is to provide no minimum ZAR return, with the maximum possible full uncapped participation in the Index, with a 100% ZAR capital protected investment, thus also providing full USD / ZAR return exposure. It is Aluma’s view that this investment could be suitable for investors who require exposure to a low risk USD Multi-Asset Balanced Portfolio and 100% ZAR capital protection.",
                            Institute = "Standard Bank",
                            IsActive = true,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(5780),
                            ModifiedBy = 0,
                            Name = "Structured Note",
                            PaymentType = 0,
                            ProductCategory = 1,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 2,
                            AssociatedRisk = 3,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8058),
                            CreatedBy = 0,
                            Description = "Our Local Share Portfolio is an investment product for discretionary money, which allows you to access to all Local Shares listed on the JSE as well as EFTs.It is subject to CGT, income tax on interest, dividends tax, and Real Estate Investment Trust (REIT) tax. Income tax is due whether interest is earned by your investment. A CGT event will occur when you do a withdrawal or a switch from an investment portfolio. A 20% withholdings tax on local dividends applies. We will deduct any dividend and REIT tax which you may owe from an income distribution before it’s invested into your investment account. Contributions, withdrawals and drawing a regular withdrawal\r\n                                are allowable at any point in time without incurring penalties.You may change,\r\n                                stop and resume your ad hoc or regular contributions at any time without incurring any penalties.",
                            Institute = "Standard Bank",
                            IsActive = false,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8062),
                            ModifiedBy = 0,
                            Name = "Local Share Portfolio",
                            PaymentType = 0,
                            ProductCategory = 1,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 3,
                            AssociatedRisk = 3,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8068),
                            CreatedBy = 0,
                            Description = "Our International Share Portfolio is an investment product for discretionary money, which allows you to access to all International Shares listed on International Stock exchanges as well as ETFs. It is subject to CGT, income tax on interest, dividends tax, and Real Estate Investment Trust (REIT) tax. Income tax is due whenever interest is earned by your investment. A CGT event will occur when you do a withdrawal or a switch from an investment portfolio. A 20% withholdings tax on local dividends applies. We will deduct any dividend and REIT tax which you may owe from an income distribution before it’s invested into your investment account Contributions, withdrawals and drawing a regular withdrawal are allowable at any point in time without incurring penalties. You may change, stop and resume your ad hoc or regular contributions at any time without incurring any penalties.",
                            Institute = "Standard Bank",
                            IsActive = false,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8069),
                            ModifiedBy = 0,
                            Name = "International Share Portfolio",
                            PaymentType = 1,
                            ProductCategory = 1,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 4,
                            AssociatedRisk = 3,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8071),
                            CreatedBy = 0,
                            Description = "Trade the JSE and International Equities, CFDs, Indices, ETFs, Forex & Commodities from a single trading account at very competitive rates. Aluma clients receive cost- effective trading via a Multi Asset Direct Market Access (DMA) class-leading trading platform. Clients have the option to manage their own trading account and execute their own trades, or to have their account managed on a discretionary basis.",
                            Institute = "Standard Bank",
                            IsActive = false,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8072),
                            ModifiedBy = 0,
                            Name = "Self Managed Account",
                            PaymentType = 1,
                            ProductCategory = 1,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 5,
                            AssociatedRisk = 3,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8075),
                            CreatedBy = 0,
                            Description = "Limited partner interests (the 'Interests') in The Aluma Capital Private Equity Fund I Partnership (the 'Partnership') are being offered to qualified investors.\r\n                                The Interests are offered subject to the right of Aluma Capital General Partner(Proprietary) Limited(the 'General Partner'), in its capacity as the ultimate\r\n                                general partner of the Partnership, to reject any application in whole or in part.",
                            Institute = "Aluma Capital",
                            IsActive = true,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8076),
                            ModifiedBy = 0,
                            Name = "Private Equity Fund - Growth",
                            PaymentType = 0,
                            ProductCategory = 1,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 6,
                            AssociatedRisk = 3,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8081),
                            CreatedBy = 0,
                            Description = "Limited partner interests (the 'Interests') in The Aluma Capital Private Equity Fund I Partnership (the 'Partnership') are being offered to qualified investors.\r\n                                The Interests are offered subject to the right of Aluma Capital General Partner(Proprietary) Limited(the 'General Partner'), in its capacity as the ultimate\r\n                                general partner of the Partnership, to reject any application in whole or in part.",
                            Institute = "Aluma Capital",
                            IsActive = true,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8082),
                            ModifiedBy = 0,
                            Name = "Private Equity Fund - Income",
                            PaymentType = 0,
                            ProductCategory = 1,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 7,
                            AssociatedRisk = 3,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8084),
                            CreatedBy = 0,
                            Description = " ",
                            Institute = "Vanguard",
                            IsActive = false,
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 870, DateTimeKind.Local).AddTicks(8085),
                            ModifiedBy = 0,
                            Name = "Fixed Income",
                            PaymentType = 0,
                            ProductCategory = 1,
                            ProductType = 0
                        });
                });

            modelBuilder.Entity("DataService.Model.ProvidingDeathSummaryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("TotalAvailable")
                        .HasColumnType("float");

                    b.Property<double>("TotalNeeds")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_summary_providing_death");
                });

            modelBuilder.Entity("DataService.Model.ProvidingDisabilitySummaryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("TotalAvailable")
                        .HasColumnType("float");

                    b.Property<double>("TotalExistingLongTermIncome")
                        .HasColumnType("float");

                    b.Property<double>("TotalExistingShortTermIncome")
                        .HasColumnType("float");

                    b.Property<double>("TotalIncomeNeed")
                        .HasColumnType("float");

                    b.Property<double>("TotalNeeds")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_summary_providing_disability");
                });

            modelBuilder.Entity("DataService.Model.ProvidingOnDeathModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Available_InsuranceDescription")
                        .HasColumnType("varchar(100)");

                    b.Property<double>("Available_Insurance_Amount")
                        .HasColumnType("float");

                    b.Property<double>("Available_PreTaxIncome_Amount")
                        .HasColumnType("float");

                    b.Property<int>("Available_PreTaxIncome_Term")
                        .HasColumnType("int");

                    b.Property<double>("CapitalNeeds")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("IncomeNeeds")
                        .HasColumnType("float");

                    b.Property<int>("IncomeTerm_Years")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("RetirementFunds")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_providing_on_death");
                });

            modelBuilder.Entity("DataService.Model.ProvidingOnDisabilityModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CapitalNeeds")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("IncomeNeeds")
                        .HasColumnType("float");

                    b.Property<int>("IncomeProtectionTerm_Months")
                        .HasColumnType("int");

                    b.Property<double>("LiabilitiesToClear")
                        .HasColumnType("float");

                    b.Property<double>("LongTermProtection")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("NeedsTerm_Years")
                        .HasColumnType("int");

                    b.Property<double>("ShortTermProtection")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_providing_on_disability");
                });

            modelBuilder.Entity("DataService.Model.ProvidingOnDreadDiseaseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Available_DreadDiseaseAmount")
                        .HasColumnType("float");

                    b.Property<string>("Available_DreadDiseaseDescription")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Needs_CapitalNeeds")
                        .HasColumnType("float");

                    b.Property<double>("Needs_GrossAnnualSalaryMultiple")
                        .HasColumnType("float");

                    b.Property<double>("Needs_GrossAnnualSalaryTotal")
                        .HasColumnType("float");

                    b.Property<double>("TotalDreadDisease")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_providing_on_dread_disease");
                });

            modelBuilder.Entity("DataService.Model.PurposeAndFundingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("InvestmentGoal")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("fundsDirectorBonus")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsDirectorDividend")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsDirectorInterest")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsDirectorSalary")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsEmployedBonus")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsEmployedCommission")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsEmployedSalary")
                        .HasColumnType("bit");

                    b.Property<string>("fundsOther")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("fundsRetiredAnnuity")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsRetiredOnceOff")
                        .HasColumnType("bit");

                    b.Property<bool>("fundsSelfTurnover")
                        .HasColumnType("bit");

                    b.Property<bool>("wealthCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("wealthGift")
                        .HasColumnType("bit");

                    b.Property<bool>("wealthIncome")
                        .HasColumnType("bit");

                    b.Property<bool>("wealthInheritance")
                        .HasColumnType("bit");

                    b.Property<bool>("wealthInvestments")
                        .HasColumnType("bit");

                    b.Property<bool>("wealthLoan")
                        .HasColumnType("bit");

                    b.Property<string>("wealthOther")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("wealthProperty")
                        .HasColumnType("bit");

                    b.Property<bool>("wealthShares")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("application_purpose_and_funding");
                });

            modelBuilder.Entity("DataService.Model.RecordOfAdviceItemsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AcceptedLumpSum")
                        .HasColumnType("float");

                    b.Property<double>("AcceptedRecurringPremium")
                        .HasColumnType("float");

                    b.Property<int>("CapitalProtection")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DeviationReason")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("RecommendedLumpSum")
                        .HasColumnType("float");

                    b.Property<double>("RecommendedRecurringPremium")
                        .HasColumnType("float");

                    b.Property<int>("RecordOfAdviceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecordOfAdviceId");

                    b.ToTable("application_roa_products");
                });

            modelBuilder.Entity("DataService.Model.RecordOfAdviceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("BdaNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Introduction")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaterialInformation")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("ReplacementReason")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Replacement_A")
                        .HasColumnType("bit");

                    b.Property<bool>("Replacement_B")
                        .HasColumnType("bit");

                    b.Property<bool>("Replacement_C")
                        .HasColumnType("bit");

                    b.Property<bool>("Replacement_D")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.ToTable("application_roa");
                });

            modelBuilder.Entity("DataService.Model.RetirementPensionFundsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<double>("EscPercent")
                        .HasColumnType("float");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("Growth")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyContributions")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId");

                    b.ToTable("fna_retirement_pension_funds");
                });

            modelBuilder.Entity("DataService.Model.RetirementPlanningModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CapitalAvailable")
                        .HasColumnType("float");

                    b.Property<double>("CapitalNeeds")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("IncomeAvailableTotal")
                        .HasColumnType("float");

                    b.Property<double>("IncomeEscalation")
                        .HasColumnType("float");

                    b.Property<double>("IncomeNeeds")
                        .HasColumnType("float");

                    b.Property<double>("IncomeNeedsEscalation")
                        .HasColumnType("float");

                    b.Property<double>("IncomeNeedsTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<int>("NeedsTerm_Years")
                        .HasColumnType("int");

                    b.Property<double>("OutstandingLiabilities")
                        .HasColumnType("float");

                    b.Property<double>("SavingsEscalation")
                        .HasColumnType("float");

                    b.Property<int>("TermPostRetirement_Years")
                        .HasColumnType("int");

                    b.Property<double>("TotalCapitalAvailable")
                        .HasColumnType("float");

                    b.Property<double>("TotalCapitalNeeds")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_retirement_planning");
                });

            modelBuilder.Entity("DataService.Model.RetirementPreservationFundsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<double>("Growth")
                        .HasColumnType("float");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId");

                    b.ToTable("fna_retirement_preservation_funds");
                });

            modelBuilder.Entity("DataService.Model.RetirementSummaryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FNAId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("SavingsRequiredPremium")
                        .HasColumnType("float");

                    b.Property<double>("TotalAvailable")
                        .HasColumnType("float");

                    b.Property<double>("TotalNeeds")
                        .HasColumnType("float");

                    b.Property<double>("TotalPensionFund")
                        .HasColumnType("float");

                    b.Property<double>("TotalPreservation")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FNAId")
                        .IsUnique();

                    b.ToTable("fna_summary_retirement");
                });

            modelBuilder.Entity("DataService.Model.RiskProfileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdvisorNotes")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("AgreeWithOutcome")
                        .HasColumnType("bit");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DerivedProfile")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DisagreeReason")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Goal")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LibertyInvestmentTerm")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LibertyRequiredRisk")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LibertyRiskCapacity")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LibertyRiskTolerance")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("RiskAge")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RiskExample")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RiskInflation")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RiskReaction")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RiskTerm")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_risk_profile");
                });

            modelBuilder.Entity("DataService.Model.TaxLumpsumModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("FnaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<double>("PreviouslyDisallowed")
                        .HasColumnType("float");

                    b.Property<double>("RetirementReceived")
                        .HasColumnType("float");

                    b.Property<double>("SeverenceReceived")
                        .HasColumnType("float");

                    b.Property<double>("TaxPayable")
                        .HasColumnType("float");

                    b.Property<double>("WithdrawalReceived")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FnaId")
                        .IsUnique();

                    b.ToTable("fna_tax_lumpsum");
                });

            modelBuilder.Entity("DataService.Model.TaxResidencyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TaxObligations")
                        .HasColumnType("bit");

                    b.Property<bool>("UsCitizen")
                        .HasColumnType("bit");

                    b.Property<bool>("UsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("UsRelinquished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_tax_residency");
                });

            modelBuilder.Entity("DataService.Model.UserDocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_documents");
                });

            modelBuilder.Entity("DataService.Model.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaidenName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RSAIdNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("RegistrationVerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SocialId")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("isOtpLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("isRegistrationVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("isSocialLogin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RSAIdNumber")
                        .IsUnique()
                        .HasFilter("[RSAIdNumber] IS NOT NULL");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 7, 8, 4, 43, 885, DateTimeKind.Local).AddTicks(7539),
                            CreatedBy = 0,
                            Email = "dev@aluma.co.za",
                            FirstName = "Dev",
                            LastName = "Tester",
                            MobileNumber = "0843334444",
                            Modified = new DateTime(2022, 6, 7, 8, 4, 43, 885, DateTimeKind.Local).AddTicks(7555),
                            ModifiedBy = 0,
                            Password = "9205.mJ+WxOE1h1DgBU98Q5ZrWg==.b62aXP5jz32ZPkOt5Idm3iSOg0T4tgztQwSYK4GEtPg=",
                            RSAIdNumber = "9012245555088",
                            RegistrationVerifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Role = 0,
                            isOtpLocked = false,
                            isRegistrationVerified = true,
                            isSocialLogin = false
                        });
                });

            modelBuilder.Entity("DataService.Model.AccrualModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("Accrual")
                        .HasForeignKey("DataService.Model.AccrualModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.AddressModel", b =>
                {
                    b.HasOne("DataService.Model.UserModel", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataService.Model.AdministrationCostsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("AdministrationCost")
                        .HasForeignKey("DataService.Model.AdministrationCostsModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.AdvisorModel", b =>
                {
                    b.HasOne("DataService.Model.UserModel", "User")
                        .WithOne("Advisor")
                        .HasForeignKey("DataService.Model.AdvisorModel", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataService.Model.ApplicationDocumentModel", b =>
                {
                    b.HasOne("DataService.Model.ApplicationModel", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DataService.Model.ApplicationModel", b =>
                {
                    b.HasOne("DataService.Model.AdvisorModel", "Advisor")
                        .WithMany("Applications")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithMany("Applications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.AssetSummaryModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("AssetSummary")
                        .HasForeignKey("DataService.Model.AssetSummaryModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.AssetsAttractingCGTModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithMany("AssetsCGT")
                        .HasForeignKey("FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.AssetsExemptFromCGTModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithMany("AssetsNonCGT")
                        .HasForeignKey("FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.AssumptionsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("Assumptions")
                        .HasForeignKey("DataService.Model.AssumptionsModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.BankDetailsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithMany("BankDetails")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.CapitalGainsTaxModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("CapitalGainsTax")
                        .HasForeignKey("DataService.Model.CapitalGainsTaxModel", "FnaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.ClientFNAModel", b =>
                {
                    b.HasOne("DataService.Model.AdvisorModel", "Advisor")
                        .WithMany("FNAs")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithMany("FNAs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.ClientModel", b =>
                {
                    b.HasOne("DataService.Model.AdvisorModel", "Advisor")
                        .WithMany("Clients")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DataService.Model.UserModel", "User")
                        .WithOne("Client")
                        .HasForeignKey("DataService.Model.ClientModel", "UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Advisor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataService.Model.ClientProductModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataService.Model.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataService.Model.ConsumerProtectionModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.DisclosureModel", b =>
                {
                    b.HasOne("DataService.Model.AdvisorModel", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.EconomyVariablesModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("EconomyVariables")
                        .HasForeignKey("DataService.Model.EconomyVariablesModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.EmploymentDetailsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithOne("EmploymentDetails")
                        .HasForeignKey("DataService.Model.EmploymentDetailsModel", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.EstateDutyModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("EstateDuty")
                        .HasForeignKey("DataService.Model.EstateDutyModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.EstateExpensesModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("EstateExpenses")
                        .HasForeignKey("DataService.Model.EstateExpensesModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.FSPMandateModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithOne("FspMandate")
                        .HasForeignKey("DataService.Model.FSPMandateModel", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.ForeignTaxResidencyModel", b =>
                {
                    b.HasOne("DataService.Model.TaxResidencyModel", "TaxResidency")
                        .WithMany("TaxResidencyItems")
                        .HasForeignKey("TaxResidencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxResidency");
                });

            modelBuilder.Entity("DataService.Model.InsuranceModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithMany("Insurances")
                        .HasForeignKey("FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.InsuranceSummaryModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("InsuranceSummary")
                        .HasForeignKey("DataService.Model.InsuranceSummaryModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.KYCDataModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithOne("KycData")
                        .HasForeignKey("DataService.Model.KYCDataModel", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.LeadModel", b =>
                {
                    b.HasOne("DataService.Model.AdvisorModel", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithOne("Lead")
                        .HasForeignKey("DataService.Model.LeadModel", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.LiabilitiesModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithMany("Liabilities")
                        .HasForeignKey("FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.LiquidAssetsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithMany("LiquidAssets")
                        .HasForeignKey("FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.MaritalDetailsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithOne("MaritalDetails")
                        .HasForeignKey("DataService.Model.MaritalDetailsModel", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.OtpModel", b =>
                {
                    b.HasOne("DataService.Model.UserModel", "User")
                        .WithMany("Otp")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataService.Model.PassportModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithMany("Passports")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.PrimaryResidenceModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("PrimaryResidence")
                        .HasForeignKey("DataService.Model.PrimaryResidenceModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.ProvidingDeathSummaryModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("ProvidingDeathSummary")
                        .HasForeignKey("DataService.Model.ProvidingDeathSummaryModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.ProvidingDisabilitySummaryModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("ProvidingDisabilitySummary")
                        .HasForeignKey("DataService.Model.ProvidingDisabilitySummaryModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.ProvidingOnDeathModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("ProvidingDeathModel")
                        .HasForeignKey("DataService.Model.ProvidingOnDeathModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.ProvidingOnDisabilityModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("ProvidingDisabilityModel")
                        .HasForeignKey("DataService.Model.ProvidingOnDisabilityModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.ProvidingOnDreadDiseaseModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("ProvidingDreadDiseaseModel")
                        .HasForeignKey("DataService.Model.ProvidingOnDreadDiseaseModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.PurposeAndFundingModel", b =>
                {
                    b.HasOne("DataService.Model.ApplicationModel", "Application")
                        .WithOne("PurposeAndFunding")
                        .HasForeignKey("DataService.Model.PurposeAndFundingModel", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DataService.Model.RecordOfAdviceItemsModel", b =>
                {
                    b.HasOne("DataService.Model.RecordOfAdviceModel", "RecordOfAdvice")
                        .WithMany("SelectedProducts")
                        .HasForeignKey("RecordOfAdviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordOfAdvice");
                });

            modelBuilder.Entity("DataService.Model.RecordOfAdviceModel", b =>
                {
                    b.HasOne("DataService.Model.AdvisorModel", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataService.Model.ApplicationModel", "Application")
                        .WithOne("RecordOfAdvice")
                        .HasForeignKey("DataService.Model.RecordOfAdviceModel", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("DataService.Model.RetirementPensionFundsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithMany("RetirementFunds")
                        .HasForeignKey("FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.RetirementPlanningModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("RetirementPlanning")
                        .HasForeignKey("DataService.Model.RetirementPlanningModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.RetirementPreservationFundsModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithMany("RetirementPreservationFundsModel")
                        .HasForeignKey("FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.RetirementSummaryModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("RetirementSummary")
                        .HasForeignKey("DataService.Model.RetirementSummaryModel", "FNAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.RiskProfileModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithOne("RiskProfile")
                        .HasForeignKey("DataService.Model.RiskProfileModel", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.TaxLumpsumModel", b =>
                {
                    b.HasOne("DataService.Model.ClientFNAModel", "FNA")
                        .WithOne("TaxLumpsum")
                        .HasForeignKey("DataService.Model.TaxLumpsumModel", "FnaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FNA");
                });

            modelBuilder.Entity("DataService.Model.TaxResidencyModel", b =>
                {
                    b.HasOne("DataService.Model.ClientModel", "Client")
                        .WithOne("TaxResidency")
                        .HasForeignKey("DataService.Model.TaxResidencyModel", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("DataService.Model.UserDocumentModel", b =>
                {
                    b.HasOne("DataService.Model.UserModel", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataService.Model.AdvisorModel", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Clients");

                    b.Navigation("FNAs");
                });

            modelBuilder.Entity("DataService.Model.ApplicationModel", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("PurposeAndFunding");

                    b.Navigation("RecordOfAdvice");
                });

            modelBuilder.Entity("DataService.Model.ClientFNAModel", b =>
                {
                    b.Navigation("Accrual");

                    b.Navigation("AdministrationCost");

                    b.Navigation("AssetsCGT");

                    b.Navigation("AssetsNonCGT");

                    b.Navigation("AssetSummary");

                    b.Navigation("Assumptions");

                    b.Navigation("CapitalGainsTax");

                    b.Navigation("EconomyVariables");

                    b.Navigation("EstateDuty");

                    b.Navigation("EstateExpenses");

                    b.Navigation("Insurances");

                    b.Navigation("InsuranceSummary");

                    b.Navigation("Liabilities");

                    b.Navigation("LiquidAssets");

                    b.Navigation("PrimaryResidence");

                    b.Navigation("ProvidingDeathModel");

                    b.Navigation("ProvidingDeathSummary");

                    b.Navigation("ProvidingDisabilityModel");

                    b.Navigation("ProvidingDisabilitySummary");

                    b.Navigation("ProvidingDreadDiseaseModel");

                    b.Navigation("RetirementFunds");

                    b.Navigation("RetirementPlanning");

                    b.Navigation("RetirementPreservationFundsModel");

                    b.Navigation("RetirementSummary");

                    b.Navigation("TaxLumpsum");
                });

            modelBuilder.Entity("DataService.Model.ClientModel", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("BankDetails");

                    b.Navigation("EmploymentDetails");

                    b.Navigation("FNAs");

                    b.Navigation("FspMandate");

                    b.Navigation("KycData");

                    b.Navigation("Lead");

                    b.Navigation("MaritalDetails");

                    b.Navigation("Passports");

                    b.Navigation("RiskProfile");

                    b.Navigation("TaxResidency");
                });

            modelBuilder.Entity("DataService.Model.RecordOfAdviceModel", b =>
                {
                    b.Navigation("SelectedProducts");
                });

            modelBuilder.Entity("DataService.Model.TaxResidencyModel", b =>
                {
                    b.Navigation("TaxResidencyItems");
                });

            modelBuilder.Entity("DataService.Model.UserModel", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Advisor");

                    b.Navigation("Client");

                    b.Navigation("Documents");

                    b.Navigation("Otp");
                });
#pragma warning restore 612, 618
        }
    }
}
