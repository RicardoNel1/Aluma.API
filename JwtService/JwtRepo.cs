using DataService.Dto;
using DataService.Enum;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Security.Claims;
using System.Text;

namespace JwtService
{
    public interface IJwtRepo
    {
        #region Public Methods

        /// <summary>
        /// Creates jwt token used to authenticate a user
        /// </summary>
        string CreateJwtToken(int userId, RoleEnum Role, int minutes = 0);

        void CreateJwtToken(LoginDto dto);

        string CreateJwtTokenB64(string Base64);

        /// <summary>
        /// Returns the JWT Token Claimes (userId & Role)
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        ClaimsDto GetUserClaims(string token);
        string GetUserClaimsB64(string token);

        #endregion Public Methods
    }

    public class JwtRepo : IJwtRepo
    {
        #region Public Fields

        public readonly JwtSettingsDto _settings;

        #endregion Public Fields

        #region Public Constructors

        public JwtRepo()
        {
            var config = new ConfigurationBuilder();
            // Get current directory will return the root dir of Base app as that is the running application
            var path = Path.Join(Directory.GetCurrentDirectory(), "appsettings.json");
            config.AddJsonFile(path, false);
            var root = config.Build();
            _settings = root.GetSection("JwtSettings").Get<JwtSettingsDto>();
        }

        #endregion Public Constructors

        #region Public Properties

        public JwtSettingsDto settings { get => _settings; }

        #endregion Public Properties

        #region Public Methods

        public string CreateJwtToken(int userId, RoleEnum role, int minutes)
        {
            var handler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_settings.Secret);
            minutes = minutes > 0 ? minutes : _settings.LifeSpan;

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted

            var descriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]{
                    new Claim("UserId", userId.ToString()),
                    new Claim(ClaimTypes.Role, role.ToString()),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
                }),
                Expires = DateTime.UtcNow.AddMinutes(minutes),
                SigningCredentials = new SigningCredentials(
                    new SymmetricSecurityKey(key),
                    SecurityAlgorithms.HmacSha256Signature),
                //Issuer = _settings.Issuer,
                //Audience = _settings.Audience
            };
            var token = handler.CreateToken(descriptor);
            return handler.WriteToken(token);
        }

        public void CreateJwtToken(LoginDto dto)
        {
            throw new NotImplementedException();
        }

        public string CreateJwtTokenB64(string Base64)
        {
            var handler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_settings.Secret);
            var descriptor = new SecurityTokenDescriptor
            {
                //Subject = new ClaimsIdentity(new Claim[]
                //{
                //    new Claim(ClaimTypes.Name, userId.ToString()),
                //    new Claim(ClaimTypes.Role, role)
                //}),
                Subject = new ClaimsIdentity(new Claim[]{
                    new Claim("Base64", Base64),
                }),
                Expires = DateTime.UtcNow.AddMinutes(_settings.LifeSpan),
                SigningCredentials = new SigningCredentials(
                    new SymmetricSecurityKey(key),
                    SecurityAlgorithms.HmacSha256Signature),
                //Issuer = _settings.Issuer,
                //Audience = _settings.Audience
            };
            var token = handler.CreateToken(descriptor);
            return handler.WriteToken(token);
        }

        public ClaimsDto GetUserClaims(string token)
        {
            string[] broken_str = token.Split(' ');

            var handler = new JwtSecurityTokenHandler();
            var tokenDetails = handler.ReadToken(broken_str[1]) as JwtSecurityToken;

            var id = Int32.Parse(tokenDetails.Claims.First(c => c.Type == "UserId").Value);
            //var role = tokenDetails.Claims.First(c => c.Type == ClaimTypes.Role).Value.ToString();

            return new ClaimsDto()
            {
                UserId = id,
                //Role = role
            };
        }
        public string GetUserClaimsB64(string token)
        {
            string[] broken_str = token.Split(' ');

            var handler = new JwtSecurityTokenHandler();
            var tokenDetails = handler.ReadToken(broken_str[1]) as JwtSecurityToken;

            return tokenDetails.Claims.First(c => c.Type == "Base64").Value.ToString();
        }

        #endregion Public Methods
    }
}